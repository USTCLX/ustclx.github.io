<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>herrycodelee blog</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-09-27T15:06:26.118Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xiang Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试题：平铺protobuf字符串</title>
    <link href="http://yoursite.com/2022/09/27/%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E5%B9%B3%E9%93%BAprotobuf%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2022/09/27/%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E5%B9%B3%E9%93%BAprotobuf%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2022-09-27T22:42:44.000Z</published>
    <updated>2022-09-27T15:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到了一道很有意思的面试题目，属于算法题的类型，但是确不是 leetcode 的原题，特此记录思考过程与解答方法。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个 protobuf 类型的字符串，如下所示</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto&quot;</span>;</span><br><span class="line"><span class="keyword">package</span> webcast.api.user;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* METHOD: GET */</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">ReportReasonRequestParams</span> &#123;</span><br><span class="line">  <span class="type">int64</span> room_id = <span class="number">1</span>; <span class="comment">// different reasons for different roo</span></span><br><span class="line">  <span class="type">int64</span> ab_scene = <span class="number">2</span>; <span class="comment">// ab scene, deprecated</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">ReportReasonResponse</span>&#123;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">ReasonData</span> &#123;</span><br><span class="line">    <span class="type">int64</span> reason = <span class="number">1</span>;</span><br><span class="line">    <span class="type">string</span> reason_str = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">repeated</span> ReasonData data = <span class="number">1</span>;</span><br><span class="line">  Extra extra=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出仍然是一个字符串，要求把嵌套的结构拉出来铺到外层。如下所示</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto&quot;</span>;</span><br><span class="line"><span class="keyword">package</span> webcast.api.user;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* METHOD: GET */</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">ReportReasonRequestParams</span> &#123;</span><br><span class="line">  <span class="type">int64</span> room_id = <span class="number">1</span>; <span class="comment">// different reasons for different roo</span></span><br><span class="line">  <span class="type">int64</span> ab_scene = <span class="number">2</span>; <span class="comment">// ab scene, deprecated</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">ReasonData</span> &#123;</span><br><span class="line">  <span class="type">int64</span> reason = <span class="number">1</span>;</span><br><span class="line">  <span class="type">string</span> reason_str = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">ReportReasonResponse</span>&#123;</span><br><span class="line">  <span class="keyword">repeated</span> ReasonData data = <span class="number">1</span>;</span><br><span class="line">  Extra extra=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这个问题很容易联想到类似的问题，比如解析 json 字符串，有效的括号数目，那么就一般就需要识别一些关键的特征，比如”{“，以及利用栈这样的数据结构来存储数据（因为栈有先入后出的特性，那么里层的嵌套结构就会后入，然后先从栈中弹出来）。</p><p>但是这里值得注意的是，我们需要把特征定为 <code>message xx &#123;</code> 而不是简单的 <code>&#123;</code>, 因为提取的时候，<code>message</code> 关键字也是提取数据的一个整体。</p><p>所以我想到的是，使用正则表达式，先把所有的特征提取出来，记录特征字符串和它的索引，然后遍历整个字符串，在遇到一个特征字符串的时候，入栈，在遇到<code>&#125;</code>的时候，将栈顶元素弹出，拼接到结果字符串中，在遇到其他字符的时候，将它拼接到栈顶元素中。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">parse</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> stack = [<span class="string">&quot;&quot;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 收集所有的特征字符串和他们的索引</span></span><br><span class="line">  <span class="comment">// flags = [[&#x27;message R &#123;&#x27;, 14]]</span></span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/message.*&#123;/g</span>;</span><br><span class="line">  <span class="keyword">let</span> flags = [];</span><br><span class="line">  <span class="keyword">let</span> temp = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">while</span> ((temp = reg.<span class="title function_">exec</span>(str)) !== <span class="literal">null</span>) &#123;</span><br><span class="line">    flags.<span class="title function_">push</span>([temp[<span class="number">0</span>], temp.<span class="property">index</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历字符串</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (flags.<span class="property">length</span> &amp;&amp; i === flags[<span class="number">0</span>][<span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">const</span> [str] = flags.<span class="title function_">shift</span>();</span><br><span class="line">      stack.<span class="title function_">push</span>([str]);</span><br><span class="line">      i = i + str.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] === <span class="string">&quot;&#125;&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> top = stack.<span class="title function_">pop</span>();</span><br><span class="line">      top = top + str[i] + (str[++i] ?? <span class="string">&quot;&quot;</span>);</span><br><span class="line">      res += top;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      stack[stack.<span class="property">length</span> - <span class="number">1</span>] = stack[stack.<span class="property">length</span> - <span class="number">1</span>] + str[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (stack.<span class="property">length</span>) &#123;</span><br><span class="line">    res = stack.<span class="title function_">pop</span>() + res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">`syntax = &quot;proto&quot;;</span></span><br><span class="line"><span class="string">package webcast.api.user;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/* METHOD: GET */</span></span><br><span class="line"><span class="string">message ReportReasonRequestParams &#123;</span></span><br><span class="line"><span class="string">  int64 room_id = 1; // different reasons for different roo</span></span><br><span class="line"><span class="string">  int64 ab_scene = 2; // ab scene, deprecated</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">message ReasonData &#123;</span></span><br><span class="line"><span class="string">  int64 reason = 1;</span></span><br><span class="line"><span class="string">  string reason_str = 2;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">message ReportReasonResponse&#123;</span></span><br><span class="line"><span class="string">  repeated ReasonData data = 1;</span></span><br><span class="line"><span class="string">  Extra extra=2;</span></span><br><span class="line"><span class="string">&#125;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">parse</span>(str));</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto&quot;</span>;</span><br><span class="line"><span class="keyword">package</span> webcast.api.user;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* METHOD: GET */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">ReportReasonRequestParams</span> &#123;</span><br><span class="line">  <span class="type">int64</span> room_id = <span class="number">1</span>; <span class="comment">// different reasons for different roo</span></span><br><span class="line">  <span class="type">int64</span> ab_scene = <span class="number">2</span>; <span class="comment">// ab scene, deprecated</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">message </span><span class="title class_">ReasonData</span> &#123;</span><br><span class="line">  <span class="type">int64</span> reason = <span class="number">1</span>;</span><br><span class="line">  <span class="type">string</span> reason_str = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">message </span><span class="title class_">ReportReasonResponse</span>&#123;</span><br><span class="line">  <span class="keyword">repeated</span> ReasonData data = <span class="number">1</span>;</span><br><span class="line">  Extra extra=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近遇到了一道很有意思的面试题目，属于算法题的类型，但是确不是 leetcode 的原题，特此记录思考过程与解答方法。&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h</summary>
      
    
    
    
    
    <category term="算法与数据结构" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>先序遍历二叉树的三种方法</title>
    <link href="http://yoursite.com/2022/09/24/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2022/09/24/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2022-09-24T22:09:21.000Z</published>
    <updated>2022-09-27T15:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<p>最近温故了二叉树的相关算法，根据 labuladong 的算法小抄学习了二叉树数据结构的一个框架，结合以前跟着 B 站清华大学数据结构精品课学习的迭代的方式遍历二叉树，一共总结了三种先序遍历二叉树的方法，特此记录。</p><h2 id="traverse-遍历方法"><a href="#traverse-遍历方法" class="headerlink" title="traverse 遍历方法"></a>traverse 遍历方法</h2><p>思路是利用递归函数遍历一个二叉树，但是遍历的过程中，并不会有返回值，所以可以利用一个外部变量（或者形参）来记录遍历的结果。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">preorderTraversal</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">traverse</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">    <span class="title function_">traverse</span>(root.<span class="property">left</span>);</span><br><span class="line">    <span class="title function_">traverse</span>(root.<span class="property">right</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">traverse</span>(root);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分解子问题，并利用子问题的解得到全局的解"><a href="#分解子问题，并利用子问题的解得到全局的解" class="headerlink" title="分解子问题，并利用子问题的解得到全局的解"></a>分解子问题，并利用子问题的解得到全局的解</h2><p>这个方法和遍历法最重要的区别就是，需要利用函数的返回值，然后在后序遍历的位置，拼装结果。<br>思路是在递归的过程中，先将跟节点的值放入结果中，然后算出左子树的结果，然后算出右子树的结果，最后把左右子树的结果按顺序拼接到根节点的结果当中。最后返回。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">preorderTraversal</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 访问根节点</span></span><br><span class="line">  res.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算左右子树的结果</span></span><br><span class="line">  <span class="keyword">const</span> left = <span class="title function_">preorderTraversal</span>(root.<span class="property">left</span>);</span><br><span class="line">  <span class="keyword">const</span> right = <span class="title function_">preorderTraversal</span>(root.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拼接左子树</span></span><br><span class="line">  res.<span class="title function_">push</span>(...left);</span><br><span class="line">  <span class="comment">// 拼接右子树</span></span><br><span class="line">  res.<span class="title function_">push</span>(...right);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迭代的方式"><a href="#迭代的方式" class="headerlink" title="迭代的方式"></a>迭代的方式</h2><p>思路是利用一个数组来模拟函数的调用栈，在迭代的过程中，先访问跟节点，然后访问左子树，在访问的过程中，如果有有右子树就入栈。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">preorderTraversal</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">const</span> nodes = [root];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (nodes.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> node = nodes.<span class="title function_">pop</span>();</span><br><span class="line">    <span class="keyword">while</span> (node) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(node.<span class="property">val</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">right</span>) nodes.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">      node = node.<span class="property">left</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近温故了二叉树的相关算法，根据 labuladong 的算法小抄学习了二叉树数据结构的一个框架，结合以前跟着 B 站清华大学数据结构精品课学习的迭代的方式遍历二叉树，一共总结了三种先序遍历二叉树的方法，特此记录。&lt;/p&gt;
&lt;h2 id=&quot;traverse-遍历方法&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="算法与数据结构" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>极简代码构建用于级联选择器的TreeData数据结构</title>
    <link href="http://yoursite.com/2022/05/03/%E4%B8%A4%E6%AD%A5%E6%9E%84%E5%BB%BA%E7%94%A8%E4%BA%8E%E7%BA%A7%E8%81%94%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84TreeData%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2022/05/03/%E4%B8%A4%E6%AD%A5%E6%9E%84%E5%BB%BA%E7%94%A8%E4%BA%8E%E7%BA%A7%E8%81%94%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84TreeData%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2022-05-03T20:05:43.000Z</published>
    <updated>2022-09-27T15:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>工作中遇到了一个需求，使用 Antd 的 TreeSelect 组件实现一个 gitlab 仓库文件级联选择器。</p><p>后端返回的数据结构如下，这是一种扁平的数据结构，每个节点有三个属性。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tree_nodes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tree&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ansible/plays/admin&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blob&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ansible/plays/admin/test.yml&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;audit&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tree&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ansible/plays/audit&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;config.yml&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blob&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ansible/plays/config.yml&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;debug_gather_facts.yml&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blob&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ansible/plays/debug_gather_facts.yml&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>但是 Antd 的 TreeSelect 组件的 treeData prop 接收的却是一种如下的树型数据结构。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> treeData = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;Node1&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;0-0&quot;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;Child Node1&quot;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&quot;0-0-1&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;Child Node2&quot;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&quot;0-0-2&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;Node2&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;0-1&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>因此需要前端自己对数据进行一次转换。</p><h2 id="TrieTree-字典树"><a href="#TrieTree-字典树" class="headerlink" title="TrieTree 字典树"></a>TrieTree 字典树</h2><p>其实 Antd 的 treeData 是一种典型的字典树数据结构，如下图。因此问题就抽象成了字典树的构造问题。</p><p><img src="https://raw.githubusercontent.com/USTCLX/images/main/static/20220503203020.png" alt="文件夹结构"></p><h2 id="构造-treeData"><a href="#构造-treeData" class="headerlink" title="构造 treeData"></a>构造 treeData</h2><p>构造 treeData 的代码如下，为方便起见，思路直接写在了注释里面，除了入口函数<code>buildTree</code>，只使用了两个工具函数 <code>insert</code> 和 <code>findChild</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">RawDataNode</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;tree&quot;</span> | <span class="string">&quot;blob&quot;</span>;</span><br><span class="line">  <span class="attr">path</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">isLeaf</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">TreeNode</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findChild</span>(<span class="params">node: TreeNode, title: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 从当前node的children中寻找title相同的节点（如果有，代表之前已经创建过同名的节点了）。</span></span><br><span class="line">  <span class="keyword">return</span> node.<span class="property">children</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">node</span>) =&gt;</span> node.<span class="property">title</span> === title);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">insert</span>(<span class="params">node: TreeNode, data: RawDataNode</span>) &#123;</span><br><span class="line">  <span class="comment">// 2. 将path 拆解为数组，方便进行深度遍历操作，数组里面就是一层一层的文件（夹）名称</span></span><br><span class="line">  <span class="keyword">const</span> pathArr = data.<span class="property">path</span>.<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  <span class="comment">// 3. 用于记录进入到第几层 path，方便在创建child时生成value</span></span><br><span class="line">  <span class="keyword">const</span> temp = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 记录当前node</span></span><br><span class="line">  <span class="keyword">let</span> currentNode = node;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5. 对pathArr进行遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> pathSlice <span class="keyword">of</span> pathArr) &#123;</span><br><span class="line">    <span class="comment">// 6. 尝试从当前节点的children中找到title为pathSlice的节点</span></span><br><span class="line">    <span class="keyword">let</span> child = <span class="title function_">findChild</span>(currentNode, pathSlice);</span><br><span class="line">    temp.<span class="title function_">push</span>(pathSlice);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!child) &#123;</span><br><span class="line">      <span class="comment">// 7. 如果没有找到，则创建一个新的child，并将它加入node的children</span></span><br><span class="line">      child = &#123;</span><br><span class="line">        <span class="attr">title</span>: pathSlice,</span><br><span class="line">        <span class="attr">value</span>: temp.<span class="title function_">join</span>(<span class="string">&quot;/&quot;</span>),</span><br><span class="line">        <span class="attr">isLeaf</span>: data.<span class="property">type</span> === <span class="string">&quot;blob&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: [],</span><br><span class="line">      &#125;;</span><br><span class="line">      currentNode.<span class="property">children</span>?.<span class="title function_">push</span>(child);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8. 将当前节点指向node，继续下一轮对pathArr的遍历</span></span><br><span class="line">    currentNode = child;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">buildTree</span>(<span class="params">tree_nodes: RawDataNode[]</span>): <span class="title class_">TreeNode</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">root</span>: <span class="title class_">TreeNode</span> = &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">isLeaf</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">children</span>: [],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 对原始数据进行遍历并依次插入tree中</span></span><br><span class="line">  tree_nodes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">node</span>) =&gt;</span> <span class="title function_">insert</span>(root, node));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> root.<span class="property">children</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;工作中遇到了一个需求，使用 Antd 的 TreeSelect 组件实现一个 gitlab 仓库文件级联选择器。&lt;/p&gt;
&lt;p&gt;后端返回的数</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="前端应用" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Iterm2 修改默认Key Mappings</title>
    <link href="http://yoursite.com/2022/04/24/Iterm2-%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4Key-Mappings/"/>
    <id>http://yoursite.com/2022/04/24/Iterm2-%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4Key-Mappings/</id>
    <published>2022-04-24T16:55:12.000Z</published>
    <updated>2022-09-27T15:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<p>平时使用 Mac 工作，安装了 Iterm2 来取代默认的 Terminal 软件。但是 Iterm2 的按键却非常不符合平时的习惯。</p><p>比如删除一整行这个操作</p><ul><li>在类似 VSCode 这样的编辑器中，都是使用<code>Cmd + delete</code>这样的按键组合</li><li>但是在 Iterm2 中，却是<code>Control + U</code> 这样的按键组合</li></ul><p>可以通过如下方式修改 Iterm2 的 Key Mappings</p><h3 id="1-打开-Preferences"><a href="#1-打开-Preferences" class="headerlink" title="1. 打开 Preferences"></a>1. 打开 Preferences</h3><p><img src="https://raw.githubusercontent.com/USTCLX/images/main/static/20220424170010.png"></p><h3 id="2-进入-Profiles-gt-Keys-gt-Key-Mappings。选择-Natural-Text-Editing"><a href="#2-进入-Profiles-gt-Keys-gt-Key-Mappings。选择-Natural-Text-Editing" class="headerlink" title="2. 进入 Profiles -&gt; Keys -&gt; Key Mappings。选择 Natural Text Editing"></a>2. 进入 Profiles -&gt; Keys -&gt; Key Mappings。选择 Natural Text Editing</h3><p><img src="https://raw.githubusercontent.com/USTCLX/images/main/static/20220424170216.png"></p><p>大工告成，可以愉快的使用<code>Cmd + delete</code>这样的按键组合了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;平时使用 Mac 工作，安装了 Iterm2 来取代默认的 Terminal 软件。但是 Iterm2 的按键却非常不符合平时的习惯。&lt;/p&gt;
&lt;p&gt;比如删除一整行这个操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在类似 VSCode 这样的编辑器中，都是使用&lt;code&gt;Cmd + de</summary>
      
    
    
    
    
    <category term="奇奇怪怪的问题的解决方案" scheme="http://yoursite.com/tags/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    <category term="Iterm2" scheme="http://yoursite.com/tags/Iterm2/"/>
    
  </entry>
  
  <entry>
    <title>Gitkraken 6.5.1版本回退</title>
    <link href="http://yoursite.com/2022/04/24/Gitkraken-6-5-1%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/"/>
    <id>http://yoursite.com/2022/04/24/Gitkraken-6-5-1%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/</id>
    <published>2022-04-24T16:35:46.000Z</published>
    <updated>2022-09-27T15:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<p>Gitkraken 是一款 Git 的图形化操作工作，个人很喜欢他的 UI 和操作方式。如下图:</p><p><img src="https://raw.githubusercontent.com/USTCLX/images/main/static/20220424172223.png"></p><p>但是最新版的 Gitkraken 要求必须付费才能使用和操作私有仓库。6.5.1 是支持免费私有仓库的最后一个版本。有需要的朋友可以自己选择下载。有条件的朋友也可以支持一下付费最新版。</p><p>PS: Gitkraken 有自动更新的功能，如果需要关闭，在不同的操作系统上有不同的方法。不过，通过修改 host 文件，可以一劳永逸。</p><h3 id="Gitkraken-6-5-1-官方地址"><a href="#Gitkraken-6-5-1-官方地址" class="headerlink" title="Gitkraken 6.5.1 官方地址"></a>Gitkraken 6.5.1 官方地址</h3><ul><li>win-x86:</li></ul><p><a href="release.axocdn.com/win32/GitKrakenSetup-6.5.1.exe">release.axocdn.com&#x2F;win32&#x2F;GitKrakenSetup-6.5.1.exe</a></p><p><a href="release.gitkraken.com/win32/GitKrakenSetup-6.5.1.exe">release.gitkraken.com&#x2F;win32&#x2F;GitKrakenSetup-6.5.1.exe</a></p><ul><li>win-x64:</li></ul><p><a href="release.axocdn.com/win64/GitKrakenSetup-6.5.1.exe">release.axocdn.com&#x2F;win64&#x2F;GitKrakenSetup-6.5.1.exe</a></p><p><a href="release.gitkraken.com/win64/GitKrakenSetup-6.5.1.exe">release.gitkraken.com&#x2F;win64&#x2F;GitKrakenSetup-6.5.1.exe</a></p><ul><li>linux-deb:</li></ul><p><a href="release.axocdn.com/linux/GitKraken-v6.5.1.deb">release.axocdn.com&#x2F;linux&#x2F;GitKraken-v6.5.1.deb</a></p><p><a href="release.gitkraken.com/linux/GitKraken-v6.5.1.deb">release.gitkraken.com&#x2F;linux&#x2F;GitKraken-v6.5.1.deb</a></p><ul><li>linux-rpm:</li></ul><p><a href="release.axocdn.com/linux/GitKraken-v6.5.1.rpm">release.axocdn.com&#x2F;linux&#x2F;GitKraken-v6.5.1.rpm</a></p><p><a href="release.gitkraken.com/linux/GitKraken-v6.5.1.rpm">release.gitkraken.com&#x2F;linux&#x2F;GitKraken-v6.5.1.rpm</a></p><ul><li>linux-tar.gz:</li></ul><p><a href="release.axocdn.com/linux/GitKraken-v6.5.1.tar.gz">release.axocdn.com&#x2F;linux&#x2F;GitKraken-v6.5.1.tar.gz</a></p><p><a href="release.gitkraken.com/linux/GitKraken-v6.5.1.tar.gz">release.gitkraken.com&#x2F;linux&#x2F;GitKraken-v6.5.1.tar.gz</a></p><ul><li>mac:</li></ul><p><a href="release.axocdn.com/darwin/GitKraken-v6.5.1.zip">release.axocdn.com&#x2F;darwin&#x2F;GitKraken-v6.5.1.zip</a></p><p><a href="release.gitkraken.com/darwin/GitKraken-v6.5.1.zip">release.gitkraken.com&#x2F;darwin&#x2F;GitKraken-v6.5.1.zip</a></p><h3 id="配置-host-文件避免软件自动更新"><a href="#配置-host-文件避免软件自动更新" class="headerlink" title="配置 host 文件避免软件自动更新"></a>配置 host 文件避免软件自动更新</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 release.gitkraken.com api.gitkraken.com</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Gitkraken 是一款 Git 的图形化操作工作，个人很喜欢他的 UI 和操作方式。如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/USTCLX/images/main/static/20220424172</summary>
      
    
    
    
    
    <category term="奇奇怪怪的问题的解决方案" scheme="http://yoursite.com/tags/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>使用PicGo和Github打造自己的图床</title>
    <link href="http://yoursite.com/2022/04/24/%E4%BD%BF%E7%94%A8PicGo%E5%92%8CGithub%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/"/>
    <id>http://yoursite.com/2022/04/24/%E4%BD%BF%E7%94%A8PicGo%E5%92%8CGithub%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/</id>
    <published>2022-04-24T15:49:21.000Z</published>
    <updated>2022-09-27T15:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<p>平时在写 blog 的时候，难免会需要使用一些图片，目前是把图片作为静态资源的一部分放在仓库里，但是这种方式的弊端也很明显，如果我想把 blog 发布到不同的平台上，就需要在每个平台分别上传，使用图床来统一管理图片，在不同的平台都可以方便的引用，这样就方便多了。</p><p>网上调研了一下，发现用 github 作为图片的存储空间，配合一个叫做 PicGo 的软件，可以很方便的实现我的需求。下面就是具体的操作步骤。</p><ol><li>在 github 上创建一个仓库来专门存放我们的图片。<br><img src="https://raw.githubusercontent.com/USTCLX/images/main/static/20220424160232.png" alt="create_repo"></li><li>访问：<a href="https://github.com/settings/tokens%EF%BC%8C%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AAtoken%E7%94%A8%E4%BA%8EPicGo%E6%93%8D%E4%BD%9C%E4%BD%A0%E7%9A%84%E4%BB%93%E5%BA%93">https://github.com/settings/tokens，生成一个token用于PicGo操作你的仓库</a><ol><li>然后点击 Generate new token。<br><img src="https://raw.githubusercontent.com/USTCLX/images/main/static/20220424160411.png" alt="token"></li><li>把 repo 的勾打上即可。然后翻到页面最底部，点击 Generate token 的绿色按钮生成 token。<br><img src="https://raw.githubusercontent.com/USTCLX/images/main/static/20220424160541.png"></li></ol></li><li>配置 PicGo。<ol><li><strong>注意：</strong>仓库名的格式是用户名&#x2F;仓库，比如我创建了一个叫做 test 的仓库，在 PicGo 里我要设定的仓库名就是 Molunerfinn&#x2F;test。</li><li>一般我们选择 main 分支即可。然后记得点击确定以生效，然后可以点击设为默认图床来确保上传的图床是 GitHub。<br><img src="https://raw.githubusercontent.com/USTCLX/images/main/static/20220424160725.png"></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;平时在写 blog 的时候，难免会需要使用一些图片，目前是把图片作为静态资源的一部分放在仓库里，但是这种方式的弊端也很明显，如果我想把 blog 发布到不同的平台上，就需要在每个平台分别上传，使用图床来统一管理图片，在不同的平台都可以方便的引用，这样就方便多了。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="实用工具" scheme="http://yoursite.com/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>一个操作让你的iTerm2更顺手</title>
    <link href="http://yoursite.com/2022/03/10/%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E8%AE%A9%E4%BD%A0%E7%9A%84iTerm2%E6%9B%B4%E9%A1%BA%E6%89%8B/"/>
    <id>http://yoursite.com/2022/03/10/%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E8%AE%A9%E4%BD%A0%E7%9A%84iTerm2%E6%9B%B4%E9%A1%BA%E6%89%8B/</id>
    <published>2022-03-10T11:37:29.000Z</published>
    <updated>2022-09-27T15:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>使用<code>iTerm2</code>作为 terminal 已经好长时间了。它的界面确实很漂亮，但是用起来一直有一个不顺手的地方，就是如果想要删除一整行已经输入的字符，需要使用的键盘组合是<code>Ctrl + u</code>，这个设计很反直觉，在很多的场景中，这个操作都是使用<code>Cmd + delete</code>这个按键组合的，比如 vscode、文本编辑器、Chrome 地址栏等等。甚至在 vscode 的 terminal 中，也是这个组合。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>想要让<code>iTerm2</code>的使用更符合我们的直觉，只要修改如下图的配置就可以了。改完之后，溜到飞起。</p><p><img src="/images/iterm2_config.png" alt="iTerm2_config"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;iTerm2&lt;/code&gt;作为 terminal 已经好长时间了。它的界面确实很漂亮，但是用起来一直有一个不顺手的地方，就是</summary>
      
    
    
    
    
    <category term="iTerm2" scheme="http://yoursite.com/tags/iTerm2/"/>
    
  </entry>
  
  <entry>
    <title>Understanding RPC Vs REST For HTTP APIs</title>
    <link href="http://yoursite.com/2022/02/08/Understanding-RPC-Vs-REST-For-HTTP-APIs/"/>
    <id>http://yoursite.com/2022/02/08/Understanding-RPC-Vs-REST-For-HTTP-APIs/</id>
    <published>2022-02-08T14:26:30.000Z</published>
    <updated>2022-09-27T15:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<p>最近在用 nestjs 写一个后端应用程序，在设计 API 时选择了在 web app 中常被提起的 RESTful API 形式，但在过程中遇到了一些问题。</p><ul><li>虽然 RESTful 形式的 API 在很多的教程中被推荐，但是实际的工作中，却也有很多项目的 API 没有遵从 REST 的形式。</li><li>实际使用 REST 来设计 API 的时候发现了一些难受的地方，比如如何表达批量操作，如何表达文件处理这个请求。</li></ul><p>于是咨询了一些同事，查阅了一些资料，原来工作中的一些 API，使用的是 RPC 的形式。在我以前的印象中 RPC 就是远程服务调用，用后端程序和后端程序之间通信的一种方式。<br>没想到，RPC 也可以是前后端 API 设计的一种形式。在查阅的资料中，这篇<a href="https://www.smashingmagazine.com/2016/09/understanding-rest-and-rpc-for-http-apis/">Understanding RPC Vs REST For HTTP APIs</a>对我的启发很大。<br>没有必要拘泥于固定的形式，可以 REST 和 RPC 混合使用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在用 nestjs 写一个后端应用程序，在设计 API 时选择了在 web app 中常被提起的 RESTful API 形式，但在过程中遇到了一些问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虽然 RESTful 形式的 API 在很多的教程中被推荐，但是实际的工作中，却也有很多</summary>
      
    
    
    
    
    <category term="API" scheme="http://yoursite.com/tags/API/"/>
    
    <category term="RESTful" scheme="http://yoursite.com/tags/RESTful/"/>
    
    <category term="RPC" scheme="http://yoursite.com/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>浅谈ReactNode ReactElement 和Component</title>
    <link href="http://yoursite.com/2022/02/06/ReactElement-ReactNode%E5%92%8CComponent/"/>
    <id>http://yoursite.com/2022/02/06/ReactElement-ReactNode%E5%92%8CComponent/</id>
    <published>2022-02-06T11:18:45.000Z</published>
    <updated>2022-09-27T15:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<p>本文尝试分析一下，ReactNode ReactElement 和 Component 之间的关系和区别。</p><h2 id="ReactNode"><a href="#ReactNode" class="headerlink" title="ReactNode"></a>ReactNode</h2><p><code>ReactNode</code>是一种 typescript 的类型。在使用 antd 这样的组件库的时候，可以看到某些 prop 的类型是<code>ReactNode</code>，比如<code>PageHeader</code>组件的 extra 属性的类型就是<code>ReactNode</code>。</p><p>使用 vscode 的代码追踪，可以进入到<code>@types/react</code>这个包，查看<code>ReactNode</code>的类型定义如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ReactNode</span> =</span><br><span class="line">  | <span class="title class_">ReactChild</span></span><br><span class="line">  | <span class="title class_">ReactFragment</span></span><br><span class="line">  | <span class="title class_">ReactPortal</span></span><br><span class="line">  | <span class="built_in">boolean</span></span><br><span class="line">  | <span class="literal">null</span></span><br><span class="line">  | <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><p>可以发现，<code>ReactNode</code>是一个联合类型。比较符合我们平时写代码时的直觉。</p><p>其中的<code>ReactChild</code>可以继续跟踪，它的类型定义如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ReactText</span> = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReactChild</span> = <span class="title class_">ReactElement</span> | <span class="title class_">ReactText</span>;</span><br></pre></td></tr></table></figure><p>可以发现<code>ReactChild</code>也是一个联合类型，其中一个类型就是<code>ReactElement</code>。因此可以发现，<code>ReactNode</code> 包含了<code>ReactElement</code>。</p><h2 id="ReactElement"><a href="#ReactElement" class="headerlink" title="ReactElement"></a>ReactElement</h2><p><code>ReactElement</code>也是一种 typescript 类型。通常，我们在使用 typescript 书写<code>Function Component</code>的时候，如果加上了返回类型，会像这样：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>): <span class="variable constant_">JSX</span>.<span class="property">Element</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>App<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>追踪<code>JSX.Element</code>可以看到</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">  <span class="keyword">namespace</span> JSX &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Element</span> <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="title class_">ReactElement</span>&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; &#123;&#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以<code>JSX.Element</code>就是继承自<code>ReactElement</code>。查看<code>ReactElement</code>的类型定义如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ReactElement</span>&lt;</span><br><span class="line">  P = <span class="built_in">any</span>,</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">string</span> | <span class="title class_">JSXElementConstructor</span>&lt;<span class="built_in">any</span>&gt; =</span><br><span class="line">    | <span class="built_in">string</span></span><br><span class="line">    | <span class="title class_">JSXElementConstructor</span>&lt;<span class="built_in">any</span>&gt;</span><br><span class="line">&gt; &#123;</span><br><span class="line">  <span class="attr">type</span>: T;</span><br><span class="line">  <span class="attr">props</span>: P;</span><br><span class="line">  <span class="attr">key</span>: <span class="title class_">Key</span> | <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以本质上<code>ReactElement</code>就是一个对象,包含三个属性<code>type</code>,<code>props</code>,<code>key</code>。</p><p>其中最特别的就是<code>type</code>这个属性，它是一个范型，可以是<code>string</code>或者<code>JSXElementConstructor</code>。<br>多说一句，type 如果是<code>string</code>，那么它可能就是类似于<code>div</code>这样的字符串，代表 HTML 的原生标签。再来看<code>JSXElementConstructor</code>，它的定义如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">JSXElementConstructor</span>&lt;P&gt; =</span><br><span class="line">  | (<span class="function">(<span class="params">props: P</span>) =&gt;</span> <span class="title class_">ReactElement</span>&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; | <span class="literal">null</span>)</span><br><span class="line">  | (<span class="keyword">new</span> (<span class="attr">props</span>: P) =&gt; <span class="title class_">Component</span>&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt;);</span><br></pre></td></tr></table></figure><p>这也是一个联合类型，一个是函数，返回<code>ReactElement</code>。一个类，可以实例化为一个<code>Component</code>，也就是一个类组件。</p><p>其实<code>ReactElement</code>这个类型，就是代表了 React 中<a href="https://reactjs.org/docs/glossary.html#elements">Element</a>这个概念。官方解释如下：</p><blockquote><p>React elements are the building blocks of React applications. One might confuse elements with a more widely known concept of “components”. An element describes what you want to see on the screen. React elements are immutable.Typically, elements are not used directly, but get returned from components.</p></blockquote><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><p>这里直接引用 <a href="https://reactjs.org/docs/glossary.html#components">React 的官方文档</a></p><blockquote><p>React components are small, reusable pieces of code that return a React element to be rendered to the page. The simplest version of React component is a plain JavaScript function that returns a React element:</p></blockquote><p>只看函数组件，简而言之，函数组件就是可以返回一个<code>ReactElement</code>的函数。</p><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><p>我们平时书写<code>Element</code>使用的是 JSX 语法，但是这种含有标签的语法（比如 <code>&lt;h1&gt;Hello, world&lt;h1&gt;</code>）并不是 js 语法的一部分。因此我们熟悉的 JSX 语句会被编译为标准的 js 代码。</p><blockquote><p>JSX is a syntax extension to JavaScript. It is similar to a template language, but it has full power of JavaScript. JSX gets compiled to React.createElement() calls which return plain JavaScript objects called “React elements”. To get a basic introduction to JSX see the docs here and find a more in-depth tutorial on JSX here.</p></blockquote><p>使用 <a href="https://babeljs.io/repl/">Babel</a> 可以让我们看到 JSX 编译后的代码。如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="comment">/*#__PURE__*/</span> <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;click&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="comment">/*#__PURE__*/</span> <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">    <span class="string">&quot;div&quot;</span>,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">/*#__PURE__*/</span> <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;h1&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;Hello World&quot;</span>),</span><br><span class="line">    <span class="comment">/*#__PURE__*/</span> <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">Button</span>, <span class="literal">null</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文尝试分析一下，ReactNode ReactElement 和 Component 之间的关系和区别。&lt;/p&gt;
&lt;h2 id=&quot;ReactNode&quot;&gt;&lt;a href=&quot;#ReactNode&quot; class=&quot;headerlink&quot; title=&quot;ReactNode&quot;&gt;&lt;/</summary>
      
    
    
    
    
    <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>精读《Airbnb CSS / Sass Styleguide》</title>
    <link href="http://yoursite.com/2022/02/05/%E7%B2%BE%E8%AF%BB%E3%80%8AAirbnb-CSS-Sass-Styleguide%E3%80%8B/"/>
    <id>http://yoursite.com/2022/02/05/%E7%B2%BE%E8%AF%BB%E3%80%8AAirbnb-CSS-Sass-Styleguide%E3%80%8B/</id>
    <published>2022-02-05T14:57:34.000Z</published>
    <updated>2022-09-27T15:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Formatting"><a href="#Formatting" class="headerlink" title="Formatting"></a>Formatting</h2><ul><li>Prefer dashes over camelCasing in class names.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- bad --&gt;</span><br><span class="line">.avatar&#123;</span><br><span class="line">    border-radius:50%;</span><br><span class="line">    border:2px solid white; &#125;</span><br><span class="line">.no, .nope, .not_good &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line">#lol-no &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- good --&gt;</span><br><span class="line">.avatar &#123;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  border: 2px solid white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.one,</span><br><span class="line">.selector,</span><br><span class="line">.per-line &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a>BEM</h2><p><strong>BEM</strong>, or “Block-Element-Modifier”, is a naming convention for classes in HTML and CSS. It was originally developed by Yandex with large codebases and scalability in mind, and can serve as a solid set of guidelines for implementing OOCSS.</p><h2 id="Border"><a href="#Border" class="headerlink" title="Border"></a>Border</h2><p>Use 0 instead of none to specify that a style has no border.</p><h2 id="SASS"><a href="#SASS" class="headerlink" title="SASS"></a>SASS</h2><h3 id="Ordering-of-property-declarations"><a href="#Ordering-of-property-declarations" class="headerlink" title="Ordering of property declarations"></a>Ordering of property declarations</h3><h4 id="1-Property-declarations"><a href="#1-Property-declarations" class="headerlink" title="1. Property declarations"></a>1. Property declarations</h4><p>List all standard property declarations, anything that isn’t an @include or a nested selector.</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn-green</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-include-declarations"><a href="#2-include-declarations" class="headerlink" title="2. @include declarations"></a>2. <code>@include</code> declarations</h4><p>Grouping @includes at the end makes it easier to read the entire selector.</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn-green</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="keyword">@include</span> transition(background <span class="number">0.5s</span> ease);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Nested-selectors"><a href="#3-Nested-selectors" class="headerlink" title="3. Nested selectors"></a>3. Nested selectors</h4><p>Nested selectors, if necessary, go last, and nothing goes after them. Add whitespace between your rule declarations and nested selectors, as well as between adjacent nested selectors. Apply the same guidelines as above to your nested selectors.</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="keyword">@include</span> transition(background <span class="number">0.5s</span> ease);</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.icon</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><p>Prefer dash-cased variable names (e.g. $my-variable) over camelCased or snake_cased variable names. It is acceptable to prefix variable names that are intended to be used only within the same file with an underscore (e.g. $_my-variable).</p><h3 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h3><p>Mixins should be used to DRY up your code, add clarity, or abstract complexity–in much the same way as well-named functions. Mixins that accept no arguments can be useful for this, but note that if you are not compressing your payload (e.g. gzip), this may contribute to unnecessary code duplication in the resulting styles.</p><h3 id="Extend-directive"><a href="#Extend-directive" class="headerlink" title="Extend directive"></a>Extend directive</h3><p>@extend should be avoided because it has unintuitive and potentially dangerous behavior, especially when used with nested selectors. Even extending top-level placeholder selectors can cause problems if the order of selectors ends up changing later (e.g. if they are in other files and the order the files are loaded shifts). Gzipping should handle most of the savings you would have gained by using @extend, and you can DRY up your stylesheets nicely with mixins.</p><h3 id="Nested-selectors"><a href="#Nested-selectors" class="headerlink" title="Nested selectors"></a>Nested selectors</h3><p>Do not nest selectors more than three levels deep!</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.page-container</span> &#123;</span><br><span class="line">  <span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="selector-class">.profile</span> &#123;</span><br><span class="line">      <span class="comment">// STOP!</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When selectors become this long, you’re likely writing CSS that is:</p><ul><li>Strongly coupled to the HTML (fragile) —OR—</li><li>Overly specific (powerful) —OR—</li><li>Not reusable</li></ul><p><strong>Again: never nest ID selectors!</strong></p><p>If you must use an ID selector in the first place (and you should really try not to), they should never be nested. If you find yourself doing this, you need to revisit your markup, or figure out why such strong specificity is needed. If you are writing well formed HTML and CSS, you should never need to do this.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Formatting&quot;&gt;&lt;a href=&quot;#Formatting&quot; class=&quot;headerlink&quot; title=&quot;Formatting&quot;&gt;&lt;/a&gt;Formatting&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Prefer dashes over camelCasing i</summary>
      
    
    
    
    
    <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
    <category term="sass" scheme="http://yoursite.com/tags/sass/"/>
    
    <category term="style guide" scheme="http://yoursite.com/tags/style-guide/"/>
    
  </entry>
  
  <entry>
    <title>精读《Airbnb JavaScript Style Guide》</title>
    <link href="http://yoursite.com/2022/02/04/%E7%B2%BE%E8%AF%BB%E3%80%8AAirbnb-JavaScript-Style-Guide%E3%80%8B/"/>
    <id>http://yoursite.com/2022/02/04/%E7%B2%BE%E8%AF%BB%E3%80%8AAirbnb-JavaScript-Style-Guide%E3%80%8B/</id>
    <published>2022-02-04T17:42:14.000Z</published>
    <updated>2022-09-27T15:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><ul><li>To convert an iterable object to an array, use spreads … instead of Array.from.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.foo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> nodes = <span class="title class_">Array</span>.<span class="title function_">from</span>(foo);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> nodes = [...foo];</span><br></pre></td></tr></table></figure><ul><li>Use Array.from for converting an array-like object to an array.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrLike = &#123; <span class="number">0</span>: <span class="string">&quot;foo&quot;</span>, <span class="number">1</span>: <span class="string">&quot;bar&quot;</span>, <span class="number">2</span>: <span class="string">&quot;baz&quot;</span>, <span class="attr">length</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(arrLike);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrLike);</span><br></pre></td></tr></table></figure><ul><li>Use Array.from instead of spread … for mapping over iterables, because it avoids creating an intermediate array.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> baz = [...foo].<span class="title function_">map</span>(bar);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> baz = <span class="title class_">Array</span>.<span class="title function_">from</span>(foo, bar);</span><br></pre></td></tr></table></figure><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><ul><li>Use exponentiation operator ** when calculating exponentiations. eslint: no-restricted-properties</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> binary = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> binary = <span class="number">2</span> ** <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><ul><li>Group all your consts and then group all your lets.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> i,</span><br><span class="line">  len,</span><br><span class="line">  dragonball,</span><br><span class="line">  items = <span class="title function_">getItems</span>(),</span><br><span class="line">  goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">const</span> items = <span class="title function_">getItems</span>();</span><br><span class="line"><span class="keyword">let</span> dragonball;</span><br><span class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> len;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> items = <span class="title function_">getItems</span>();</span><br><span class="line"><span class="keyword">let</span> dragonball;</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">let</span> length;</span><br></pre></td></tr></table></figure><h2 id="Type-Casting-amp-Coercion"><a href="#Type-Casting-amp-Coercion" class="headerlink" title="Type Casting &amp; Coercion"></a>Type Casting &amp; Coercion</h2><ul><li>Strings: eslint: no-new-wrappers</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; this.reviewScore = 9;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="variable language_">this</span>.<span class="property">reviewScore</span>); <span class="comment">// typeof totalScore is &quot;object&quot; not &quot;string&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="variable language_">this</span>.<span class="property">reviewScore</span> + <span class="string">&quot;&quot;</span>; <span class="comment">// invokes this.reviewScore.valueOf()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="variable language_">this</span>.<span class="property">reviewScore</span>.<span class="title function_">toString</span>(); <span class="comment">// isn’t guaranteed to return a string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="title class_">String</span>(<span class="variable language_">this</span>.<span class="property">reviewScore</span>);</span><br></pre></td></tr></table></figure><ul><li>Numbers: Use Number for type casting and parseInt always with a radix for parsing strings. eslint: radix no-new-wrappers</li></ul><blockquote><p>Why? The parseInt function produces an integer value dictated by interpretation of the contents of the string argument according to the specified radix. Leading whitespace in string is ignored. If radix is undefined or 0, it is assumed to be 10 except when the number begins with the character pairs 0x or 0X, in which case a radix of 16 is assumed. This differs from ECMAScript 3, which merely discouraged (but allowed) octal interpretation. Many implementations have not adopted this behavior as of 2013. And, because older browsers must be supported, always specify a radix.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inputValue = <span class="string">&quot;4&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="keyword">new</span> <span class="title class_">Number</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = +inputValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="built_in">parseInt</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="title class_">Number</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="built_in">parseInt</span>(inputValue, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><ul><li>If for whatever reason you are doing something wild and parseInt is your bottleneck and need to use Bitshift for performance reasons, leave a comment explaining why and what you’re doing.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * parseInt was the reason my code was slow.</span></span><br><span class="line"><span class="comment"> * Bitshifting the String to coerce it to a</span></span><br><span class="line"><span class="comment"> * Number made it a lot faster.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li>Booleans</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hasAge = <span class="keyword">new</span> <span class="title class_">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hasAge = <span class="title class_">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> hasAge = !!age;</span><br></pre></td></tr></table></figure><h2 id="Naming-Conventions"><a href="#Naming-Conventions" class="headerlink" title="Naming Conventions"></a>Naming Conventions</h2><ul><li>Don’t save references to this. Use arrow functions or Function#bind.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(self);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(that);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>You may optionally uppercase a constant only if it (1) is exported, (2) is a const (it can not be reassigned), and (3) the programmer can trust it (and its nested properties) to never change.<ul><li>What about all const variables? - This is unnecessary, so uppercasing should not be used for constants within a file. It should be used for exported constants however.</li><li>What about exported objects? - Uppercase at the top level of export (e.g. EXPORTED_OBJECT.key) and maintain that all nested properties do not change.</li></ul></li></ul><blockquote><p>Why? This is an additional tool to assist in situations where the programmer would be unsure if a variable might ever change. UPPERCASE_VARIABLES are letting the programmer know that they can trust the variable (and its properties) not to change.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PRIVATE_VARIABLE</span> = <span class="string">&quot;should not be unnecessarily uppercased within a file&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">THING_TO_BE_CHANGED</span> = <span class="string">&quot;should obviously not be uppercased&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> <span class="variable constant_">REASSIGNABLE_VARIABLE</span> = <span class="string">&quot;do not use let with uppercase variables&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// allowed but does not supply semantic value</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> apiKey = <span class="string">&quot;SOMEKEY&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// better in most cases</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">API_KEY</span> = <span class="string">&quot;SOMEKEY&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - unnecessarily uppercases key while adding no semantic value</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">MAPPING</span> = &#123;</span><br><span class="line">  <span class="attr">KEY</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">MAPPING</span> = &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Array&quot;&gt;&lt;a href=&quot;#Array&quot; class=&quot;headerlink&quot; title=&quot;Array&quot;&gt;&lt;/a&gt;Array&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;To convert an iterable object to an array, use sprea</summary>
      
    
    
    
    
    <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>vscode extension 开发debug时卡在building的原因和解决</title>
    <link href="http://yoursite.com/2021/11/06/vscode%20extension%20%E5%BC%80%E5%8F%91debug%E6%97%B6%E5%8D%A1%E5%9C%A8building%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%92%8C%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2021/11/06/vscode%20extension%20%E5%BC%80%E5%8F%91debug%E6%97%B6%E5%8D%A1%E5%9C%A8building%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%92%8C%E8%A7%A3%E5%86%B3/</id>
    <published>2021-11-06T12:28:36.000Z</published>
    <updated>2022-09-27T15:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近在开发一款 vscode 插件，遇到了一个问题。特此记录。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ol><li>使用 vscode extension 官方的 cli 生成项目模版</li><li>开始 debugger 开发，一切正常，按 F5 自动弹出一个新的 vscode</li><li>升级项目中使用的 webpack 版本</li><li>使用 debugger 开发，按 F5 不会在自动弹出新的 vscode，卡在了 build 阶段，如下图</li></ol><p><img src="/images/vscode_extension.png" alt="vscode_extension_debug_problem"></p><h2 id="问题原因和解决"><a href="#问题原因和解决" class="headerlink" title="问题原因和解决"></a>问题原因和解决</h2><p>在 google 了很久之后，总算确定了问题的原因 😳。</p><p>vscode extension 在 debug 的 watch 模式下，会监听控制台 webpack 的输出。上图的截图，控制台中显示的家就是 webpack 的输出。<br>然后在项目的 task.json 中的 endsPattern 字段，会去匹配这个输出的字符串，如果匹配上了，就认为构建 ok 了，然后弹出一个新的 vscode。</p><p>问题的根据就在于升级 webpack 之后，webpack 的输出变了，因此需要重写一下。如下图。</p><p><img src="/images/vscode_extension_fix.png" alt="vscode_extension_debug_fix"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近在开发一款 vscode 插件，遇到了一个问题。特此记录。&lt;/p&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; clas</summary>
      
    
    
    
    
    <category term="vscode extension" scheme="http://yoursite.com/tags/vscode-extension/"/>
    
  </entry>
  
  <entry>
    <title>TrieTree在前端TreeSelect中的应用</title>
    <link href="http://yoursite.com/2021/10/26/TrieTree%E5%9C%A8%E5%89%8D%E7%AB%AFTreeSelector%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2021/10/26/TrieTree%E5%9C%A8%E5%89%8D%E7%AB%AFTreeSelector%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2021-10-26T03:32:52.000Z</published>
    <updated>2022-09-27T15:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TreeSelect"><a href="#TreeSelect" class="headerlink" title="TreeSelect"></a>TreeSelect</h2><p>Antd 作为最有最优秀的 React 开源组件库之一，被广泛的使用。最近笔者在工作中使用<code>TreeSelect</code>组件。它的使用非常简单，可以接收下面这样的数据结构，来生成一个<a href="https://ant.design/components/tree-select-cn/">树型选择器</a>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> treeData = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;Node1&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;0-0&quot;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;Child Node1&quot;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&quot;0-0-1&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;Child Node2&quot;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&quot;0-0-2&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;Node2&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;0-1&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>比如后端吐出给前端的数据如下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rawData = [<span class="string">&quot;a.bb&quot;</span>, <span class="string">&quot;a.cc&quot;</span>, <span class="string">&quot;a.dd.eee&quot;</span>, <span class="string">&quot;h.ff.llll&quot;</span>];</span><br></pre></td></tr></table></figure><p>要求根据<code>.</code>作为分层级隔符，将数据展示为树形选择器。因此需要将数据转为如下形式。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> treeData = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&quot;a.*&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&quot;bb&quot;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&quot;a.bb&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&quot;cc&quot;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&quot;a.cc&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&quot;dd&quot;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&quot;a.dd.*&quot;</span>,</span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&quot;eee&quot;</span>,</span><br><span class="line">                <span class="attr">value</span>: <span class="string">&quot;a.dd.eee&quot;</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;h&quot;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&quot;h.*&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&quot;ff&quot;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&quot;h.ff.*&quot;</span>,</span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&quot;llll&quot;</span>,</span><br><span class="line">                <span class="attr">value</span>: <span class="string">&quot;h.ff.llll&quot;</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="前缀树（字典树）"><a href="#前缀树（字典树）" class="headerlink" title="前缀树（字典树）"></a>前缀树（字典树）</h2><p>关于前缀树的文章可以参考<a href="https://ustclx.github.io/2020/11/15/leetcode-208-%E5%AE%9E%E7%8E%B0Trie%E6%A0%91/">leetcode 208 实现 Trie 树</a>。</p><p>这种 case，根据共同的前缀，层层递进形成的数据结构，正是前缀树的应用场景了。那么我们如何将<code>rawData</code> 转换为<code>treeData</code>呢？笔者给了一个自己实现，如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">TreeData</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">string</span>;</span><br><span class="line">  children?: <span class="title class_">TreeData</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TrieNode</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> value: <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> path: <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> isLeaf: <span class="built_in">boolean</span> = <span class="literal">false</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> isRoot: <span class="built_in">boolean</span> = <span class="literal">false</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> children: TrieNode[]</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TrieTree</span> &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="title class_">TrieNode</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">data: <span class="built_in">string</span>[] = []</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span> = <span class="keyword">new</span> <span class="title class_">TrieNode</span>(<span class="string">&quot;*&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">false</span>, <span class="literal">true</span>, []);</span><br><span class="line"></span><br><span class="line">    data.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">insert</span>(item.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">findNode</span>(<span class="params">node: TrieNode, key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!key) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!node || !node.<span class="property">children</span>?.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">children</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">child</span>) =&gt;</span> child.<span class="property">value</span> === key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">keys: <span class="built_in">string</span>[]</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="variable language_">this</span>.<span class="property">root</span>;</span><br><span class="line">    <span class="keyword">const</span> paths = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> keys) &#123;</span><br><span class="line">      paths.<span class="title function_">push</span>(key);</span><br><span class="line">      <span class="keyword">let</span> child = <span class="variable language_">this</span>.<span class="title function_">findNode</span>(node, key);</span><br><span class="line">      <span class="keyword">if</span> (!child) &#123;</span><br><span class="line">        child = <span class="keyword">new</span> <span class="title class_">TrieNode</span>(key, paths.<span class="title function_">join</span>(<span class="string">&quot;.&quot;</span>), <span class="literal">false</span>, <span class="literal">false</span>, []);</span><br><span class="line">        node.<span class="property">children</span>.<span class="title function_">push</span>(child);</span><br><span class="line">      &#125;</span><br><span class="line">      node = child;</span><br><span class="line">    &#125;</span><br><span class="line">    node.<span class="property">isLeaf</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">treeData</span>: <span class="title class_">TreeData</span>[] = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">dfs</span> = (<span class="params">node: TrieNode, treeData: TreeData[]</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (!node) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> <span class="attr">data</span>: <span class="title class_">TreeData</span> = &#123;</span><br><span class="line">        <span class="attr">title</span>: node.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">value</span>: node.<span class="property">isRoot</span></span><br><span class="line">          ? node.<span class="property">value</span></span><br><span class="line">          : node.<span class="property">isLeaf</span></span><br><span class="line">          ? node.<span class="property">path</span></span><br><span class="line">          : node.<span class="property">path</span> + <span class="string">&quot;.*&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">children</span>?.<span class="property">length</span>) data.<span class="property">children</span> = [];</span><br><span class="line"></span><br><span class="line">      treeData.<span class="title function_">push</span>(data);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> child <span class="keyword">of</span> node.<span class="property">children</span>) &#123;</span><br><span class="line">        <span class="title function_">dfs</span>(child, data.<span class="property">children</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">dfs</span>(<span class="variable language_">this</span>.<span class="property">root</span>, treeData);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> treeData;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结合-Antd-来使用"><a href="#结合-Antd-来使用" class="headerlink" title="结合 Antd 来使用"></a>结合 Antd 来使用</h2><p><a href="https://codesandbox.io/s/quizzical-yonath-sbrns">codesandbox</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TreeSelect&quot;&gt;&lt;a href=&quot;#TreeSelect&quot; class=&quot;headerlink&quot; title=&quot;TreeSelect&quot;&gt;&lt;/a&gt;TreeSelect&lt;/h2&gt;&lt;p&gt;Antd 作为最有最优秀的 React 开源组件库之一，被广泛的使用。最近笔</summary>
      
    
    
    
    
    <category term="算法与数据结构" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="前端开发中的算法" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>英语语法整理</title>
    <link href="http://yoursite.com/2021/10/24/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2021/10/24/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E6%95%B4%E7%90%86/</id>
    <published>2021-10-24T12:12:14.000Z</published>
    <updated>2022-09-27T15:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单句语法"><a href="#简单句语法" class="headerlink" title="简单句语法"></a>简单句语法</h2><p>一般英语句子的结构，可以总结为<code>主语+谓语+（东西）</code>。</p><ul><li>主语：人或者物品</li><li>谓语：动作</li></ul><h3 id="主语-谓语"><a href="#主语-谓语" class="headerlink" title="主语+谓语"></a>主语+谓语</h3><ul><li>I swim</li></ul><p>swim 是不及物动词</p><h3 id="主语-谓语-宾语"><a href="#主语-谓语-宾语" class="headerlink" title="主语+谓语+宾语"></a>主语+谓语+宾语</h3><ul><li>I like her</li></ul><p>like 是及物动词</p><h3 id="主语-谓语-间接宾语-直接宾语-双宾"><a href="#主语-谓语-间接宾语-直接宾语-双宾" class="headerlink" title="主语+谓语+间接宾语+直接宾语 (双宾)"></a>主语+谓语+间接宾语+直接宾语 (双宾)</h3><p>谓语后面跟着两个动作的承受者。</p><ul><li>Dabai teaches you English</li></ul><h3 id="主语-谓语-宾语-宾语补充"><a href="#主语-谓语-宾语-宾语补充" class="headerlink" title="主语+谓语+宾语+宾语补充"></a>主语+谓语+宾语+宾语补充</h3><p>谓语后面跟着一个动作的承受者和他的补充说明。</p><ul><li>Dabai makes you happy</li></ul><h3 id="主语-系动词-表语"><a href="#主语-系动词-表语" class="headerlink" title="主语+系动词+表语"></a>主语+系动词+表语</h3><ul><li>Dabai is smart</li></ul><h2 id="三种起修饰成分的句子结构"><a href="#三种起修饰成分的句子结构" class="headerlink" title="三种起修饰成分的句子结构"></a>三种起修饰成分的句子结构</h2><h3 id="定语，定语是广义的形容词"><a href="#定语，定语是广义的形容词" class="headerlink" title="定语，定语是广义的形容词"></a>定语，定语是广义的形容词</h3><ul><li>The <code>cute</code> boy speaks English</li><li>The boy <code>in red</code> speaks English</li><li>The boy <code>when I played withe</code> speaks English;</li></ul><h3 id="状语，状语是广义的副词"><a href="#状语，状语是广义的副词" class="headerlink" title="状语，状语是广义的副词"></a>状语，状语是广义的副词</h3><p>副词是用来修饰形容词和动词的词。</p><ul><li>Dabai answered <code>quickly</code></li><li>Dabai answerd <code>in English</code></li></ul><h3 id="同位语，把主语换个说法再说一遍"><a href="#同位语，把主语换个说法再说一遍" class="headerlink" title="同位语，把主语换个说法再说一遍"></a>同位语，把主语换个说法再说一遍</h3><ul><li>Shabai’s brother,<code>BigShaBai</code>,is a teacher</li><li>We <code>Chinese People</code> are hardworking</li></ul><h2 id="复杂句"><a href="#复杂句" class="headerlink" title="复杂句"></a>复杂句</h2><h3 id="并列关系的复合句"><a href="#并列关系的复合句" class="headerlink" title="并列关系的复合句"></a>并列关系的复合句</h3><ul><li>I washed my hands, <code>and</code> I ate breakfast</li></ul><h3 id="嵌套关系的复杂句"><a href="#嵌套关系的复杂句" class="headerlink" title="嵌套关系的复杂句"></a>嵌套关系的复杂句</h3><ul><li>The boy said that he was very hungry</li><li>The boy <code>who was crying</code> said <code>when I spoke to him</code> that he was very hungry <code>because he had had no food for two days</code></li></ul><h2 id="词类"><a href="#词类" class="headerlink" title="词类"></a>词类</h2><ul><li>名词，可数+不可数</li><li>代词，you I she he it</li><li>形容词，happy</li><li>副词，quickly</li><li>动词，run</li><li>数次，one two</li><li>冠词，the a this</li><li>介词，in at on</li><li>连词，and but</li><li>叹词，oh oops shit</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简单句语法&quot;&gt;&lt;a href=&quot;#简单句语法&quot; class=&quot;headerlink&quot; title=&quot;简单句语法&quot;&gt;&lt;/a&gt;简单句语法&lt;/h2&gt;&lt;p&gt;一般英语句子的结构，可以总结为&lt;code&gt;主语+谓语+（东西）&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主语：人或</summary>
      
    
    
    
    
    <category term="英语学习" scheme="http://yoursite.com/tags/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>如何克服精神内耗</title>
    <link href="http://yoursite.com/2021/10/24/%E5%A6%82%E4%BD%95%E5%85%8B%E6%9C%8D%E7%B2%BE%E7%A5%9E%E5%86%85%E8%80%97/"/>
    <id>http://yoursite.com/2021/10/24/%E5%A6%82%E4%BD%95%E5%85%8B%E6%9C%8D%E7%B2%BE%E7%A5%9E%E5%86%85%E8%80%97/</id>
    <published>2021-10-24T11:39:28.000Z</published>
    <updated>2022-09-27T15:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="精神内耗"><a href="#精神内耗" class="headerlink" title="精神内耗"></a>精神内耗</h2><p>今天再次阅读<code>精神内耗</code>这篇知乎文章以及他的姐妹篇<code>高效管理时间的秘诀，在于这三个清单</code>。</p><h3 id="理想的精神状态"><a href="#理想的精神状态" class="headerlink" title="理想的精神状态"></a>理想的精神状态</h3><p>理想的精神状态应该是，可以全神贯注的专注在你当前正在做的事情上，不论是学习，工作，思考，还是娱乐。</p><h3 id="我的精神状态"><a href="#我的精神状态" class="headerlink" title="我的精神状态"></a>我的精神状态</h3><p>但是目前的我是做不到的，脑袋中存在着各种各样的纠结，推演各种各样的情况，处理各种各样的信息。导致我总是精神不振，每天精神都不充沛和兴奋。</p><p>这种情况导致的结果就是，我的大脑无时无刻都在处理信息，有事甚至是不同的信息，比如我在写这篇文章的时候，就想到了还要写一篇关于头油的文章。强制转换注意力，导致注意力不集中。这里面的大量信息是无用的，空耗我大脑的 CPU 资源。</p><p>而想法多的另一个坏处是，导致想的多，做的少，比如我想学习 flutter，我想买个瑜伽垫健身，我想读《编码》这本书，我想读完我微信收藏的文章，我想看完我极客时间的课程（那个想了很久的网络协议课程），都还只停留在想想的阶段。（这个问题也许可以通过指定合理的 todo 清单来解决）</p><p>真的非常痛苦 😖。</p><h3 id="过度思虑（精神内耗），为什么会有精神内耗"><a href="#过度思虑（精神内耗），为什么会有精神内耗" class="headerlink" title="过度思虑（精神内耗），为什么会有精神内耗"></a>过度思虑（精神内耗），为什么会有精神内耗</h3><p>我的状态有个专业名词来描述，就是过度思虑，也就是通俗的精神内耗。</p><p>为什么会有这种情况呢？有以下几个原因</p><h4 id="过度活跃的-DMN"><a href="#过度活跃的-DMN" class="headerlink" title="过度活跃的 DMN"></a>过度活跃的 DMN</h4><p>DMN 就是 <code>Default Mode Network</code>，默认模式网络。它是把大脑后台零碎的信息进行梳理，把可能被遗忘的重新进行激活。哪怕什么都不做，大脑也有大约 20%的耗能任务在执行。<br>TPN，<code>Task Positive Network</code> 专注网络。</p><h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><ul><li>长时记忆能力、想象力、创造力更好一些。</li><li>DMN 涉及的脑部区域和负责<code>自我与他人</code>以及<code>情感判断</code>的网络所涉及的部分，是高度重叠的。因此更容易考虑别人的感受，以及注意到不好的地方。也就是有更好的共情能力。</li></ul><h5 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h5><ul><li>DMN 过度的活跃，会在我专注工作时，和争夺大脑的 CPU 资源，导致无法持续专注。（这点我感觉我还挺明显的，比如刚才我就突然想到了 Grab 上的麦当劳是不是可以 pick up，然后打开手机看了一下）</li><li>当 DMN 不受 TPN 的钳制时，会更加放飞自我，把很多负面的情绪和想法输送到意识里。</li></ul><h4 id="由威胁识别带来的恐惧"><a href="#由威胁识别带来的恐惧" class="headerlink" title="由威胁识别带来的恐惧"></a>由威胁识别带来的恐惧</h4><p>威胁识别。我们的大脑在加工各种信息时，有一个功能，叫做威胁识别，它往往会夸大和凸显一个事物中的威胁的细节，忽视安全的细节，从而看不清事物的全貌，继而导致我去逃避该事物。</p><h5 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h5><ul><li>自我保护</li></ul><h5 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h5><ul><li>让我们害怕去做一些事，比如我总是不敢探寻新的餐厅，担心里面价格很贵，买到很坑的东西，亦或是担心不卫生。</li></ul><p>大脑还有一种机制叫做“延伸记忆”，也就是我过去付出行动、获得成功、获得经验的经历，比如我鼓起勇气成功探寻了某个餐厅，某个景点，某个理发店，我就会发现它没什么大不了，它就会成为我下次做决定的一个选项。比如我在平时不敢说话的群里面，问了一个问题，我后面就不会再认为在这个群里问问题会有什么困难。</p><p>当大脑进行”威胁识别“时，会使用”延伸记忆“里面的信息，来进行对抗和抵消。</p><h4 id="形成精神内耗"><a href="#形成精神内耗" class="headerlink" title="形成精神内耗"></a>形成精神内耗</h4><ol><li>我遇到问题，决定先审视一下再说</li><li>这种“审视一下”，导致我过度夸大了它的威胁，从而形成恐惧</li><li>这种恐惧使我的行动的意向进一步被削弱，我需要更多的精力跟它对抗，才能采取行动，于是造成了拖延</li><li>而大多数问题在拖延之下，会变得越来越糟，最终逼我不得不去行动，于是我会感觉“做出了一个错误的决定”</li><li>久而久之，这种感觉就会加重我的自我怀疑，削弱我的自信，而从削弱我的“延伸记忆”，使得我更没有办法对抗恐惧。。。</li></ol><p>最终，我的幸福感会下降。</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>过度的精神内耗，会让我自我怀疑，缺乏自我的价值感和意义感觉。并且肯定会让我的幸福感降低，觉得很多事情没有意思，失去了生活的激情，我现在基本就有这种感觉，很多事情提不起兴趣。</p><p>当我专注时，更容易获得“绞尽脑汁”解决问题的快感。当我被 DMN 主宰时，我会分心，无法专注，因此也无法获得“绞尽脑汁”的快感，反而还会想起负面、不快乐的事情。</p><p>精神内耗会</p><ul><li>消耗精力</li><li>降低行动力</li><li>降低幸福感</li></ul><h3 id="克服精神内耗"><a href="#克服精神内耗" class="headerlink" title="克服精神内耗"></a>克服精神内耗</h3><h4 id="掌控自己的想法"><a href="#掌控自己的想法" class="headerlink" title="掌控自己的想法"></a>掌控自己的想法</h4><p>这个方法其实很困难，想法如果可以轻易被我掌控，那也就不会有那么多问题了。如何掌控，可以试试以下几种形式</p><ul><li>当我产生负面情绪，或者乱七八糟的想法时，对它说：我知道了，退下吧，我会等有空的时候处理。</li><li>用一个笔记本来记录我的负面的想法。产生负面想法时，先记下来，然后就不要想了（这一步很难）</li><li>定期查看笔记本中的负面想法，问自己<ul><li>他是真实的吗？</li><li>他发生的可能性大吗？</li><li>我有没有方法可以应对它？</li></ul></li><li>一旦把这三个问题想清楚，就划掉他</li></ul><p>上面的做法，可以强化我的“主动性”，让我感受到，我是可以掌控我的想法的，我有能力那么做。</p><h4 id="锻炼专注和感知能力"><a href="#锻炼专注和感知能力" class="headerlink" title="锻炼专注和感知能力"></a>锻炼专注和感知能力</h4><p>DMN 就是在我的大脑空闲时的信马由缰，因此如果我可以把大脑专注在某件事上，我就能降低 DMN 的活跃性。有以下两个方法可以帮我提高专注力。我需要把他们加到我的小习惯里面。</p><ul><li>冥想&#x2F;正念。这个方法在《自控力》这本书中也提到过，看来方法的有效性形成了共识。找一个舒适的位置，闭上眼睛，采取 10s 左右的呼吸，把注意力放在呼吸上面，体会呼吸的过程，不要去管脑海中来来回回的想法，也不要抑制它。持续 10 ～ 15 分钟。</li><li>停下手头的事，找个舒适的位置，先深呼吸一到两次，然后按顺序问自己<ul><li>我看到了什么</li><li>听到了什么</li><li>嗅到了什么</li><li>手和脚触碰到了什么</li><li>感觉是怎样的</li></ul></li><li>或者闭上眼睛，依靠感官走几步，专注感受感官传来的信息。</li></ul><h4 id="注意力转换和饱和"><a href="#注意力转换和饱和" class="headerlink" title="注意力转换和饱和"></a>注意力转换和饱和</h4><p>我工作的时候为什么会分心呢？就是因为当前的事情无法百分之百的吸引我的兴趣了，使我的注意力“不饱和”，然后产生了闲置资源，发生 DMN。</p><p>一个解决方法是分段工作模式，就是把同时打开多个项目（事情），项目一工作一段时间，转换到项目二，然后项目三，以此类推。这样的好处是，在同一个任务长时间之行后，开始无法集中注意力，大脑产生闲置，这时为了不让闲置的大脑专向 DMN，于是开启项目二来吸引我的注意力和大脑资源。</p><p>也就是说，我们无力控制自己分心，但是我们可以把分心引导到一个更有意义，更符合我们需求的方向。</p><p>可以结合后文的 Todo 清单来实践。</p><h4 id="把行动变成默认模式"><a href="#把行动变成默认模式" class="headerlink" title="把行动变成默认模式"></a>把行动变成默认模式</h4><p>如果一件事，我想不到特别有力的<strong>不去做</strong>的原因，那么，优先选择去做。</p><p>应该把这句话当成一个信条，指导我生活中的行动。</p><p>这些不确定的事情，因为害怕麻烦，权衡得失等原因，如果不得到解决，会一残留在我的记忆里，随着 DMN 的激活而挤占我的认知资源。</p><p>只有去行动了，才能把未知变成已知，把不确定变成确定，让它们得到安置，不再干扰我的思考。</p><p>另外，行动也会带给我正向的反馈。我所恐惧的东西，其实没有那么可怕，我对他的猜测，担忧和焦虑，很多都是不必要的。</p><h2 id="高效管理时间"><a href="#高效管理时间" class="headerlink" title="高效管理时间"></a>高效管理时间</h2><p>为了合理的安排自己的时间和需要做的事情，我之前制定了 Todo List，但是我之前制定的 Todo List，虽然看上去分门别类，但是最后执行力不行，很多都成了摆设，应该是失败了 😂。</p><p>因此决定学习“L 先生说” 公众号里推荐的 Todo List 管理方案。</p><h3 id="拖延症"><a href="#拖延症" class="headerlink" title="拖延症"></a>拖延症</h3><p>为啥我有拖延的毛病呢？<br>一个可能的原因来自“认知负担”，它让我产生了这么一个潜意识“这是一个复杂的任务，我没法立刻开工，我需要先理清思路”。比如我很早就计划了上 b 站搜索健身教程，并尝试在家里做简单的运动，但是却一直没有开始 😂。<br>实际上，我的大脑逻辑非常简单，他倾向于去做简单的，不需要太多思考的事情，而排斥复杂的，需要大量投入的事情。<br>这就为我们制定 Todo List 提供了一种指导。</p><h3 id="AFD-TodoList"><a href="#AFD-TodoList" class="headerlink" title="AFD TodoList"></a>AFD TodoList</h3><p>“L 先生说”实行的是名叫 AFD 的方法，也就是 Action、Focused、Dessert</p><h4 id="Action-执行清单"><a href="#Action-执行清单" class="headerlink" title="Action 执行清单"></a>Action 执行清单</h4><p>执行清单，就是自己计划需要完成的，但是这里不能简单的罗列，需要把粒度尽量的变小。</p><p>比如“到超市买苹果”，就是一个非常明确简单的行动，不需要思考，它所占用的认知资源非常少。</p><p>再比如“完成 Policy 改版”，就不行，颗粒度太大，并不是一步可以完成的，这样的 todo 很容易产生迷惑</p><ul><li>我做到了哪里</li><li>我的思路是什么</li><li>我还需要做些什么</li></ul><p>这些就会带给我认知负担。因此需要对这样的 item，做详细的分解。明确需要做什么，而且越具体，行动起来越容易，比如数量、目的、关键词等等。</p><p>这样当我看到任务的时候，可以毫不犹豫的去执行，不会产生拖延情绪。</p><p>但是话说回来，能够把任务拆的细，也是需要时间精力的，但是这种应该是值得的。</p><h4 id="Focused-聚焦清单"><a href="#Focused-聚焦清单" class="headerlink" title="Focused 聚焦清单"></a>Focused 聚焦清单</h4><p>“休息”并不一定是要睡个觉。对于体力劳动，睡觉时最好的休息方式，可以让肌肉得到放松。但是对于脑力劳动，却不是这样。</p><p>大脑处理不同的任务，使用的是不同的区域，当长时间执行一个任务时，大脑的耗能和平时其实不会差太多，但是对他的“新鲜感”会降低很多，这种“新鲜感”的降低，是我们脑力劳动疲劳的主要原因，有时我会觉得自己困了，其实是长时间思考同样的内容，会抑制大脑的活动，让人感到厌倦、昏昏欲睡无法集中注意力。</p><p>因此脑力疲惫更好的方式时，调整聚焦点，切换到不同的工作上，激活大脑的另一个区域。</p><p>因此这个清单中，可以存放两类东西</p><ul><li>重要的亟待解决的问题</li><li>正在研读和学习的书籍等</li></ul><p>每当工作累了，就可以站起来走走，喝点东西，散步，然后再脑袋里思考这些问题。比如：</p><ul><li>今晚吃什么</li><li>需要买些什么东西了</li><li>调研一下周末去哪里玩</li></ul><p>或者打开没有阅读完的书籍，阅读一会儿。等到这个清单的里的事情疲惫了，就可以去接着做之前的事情了。</p><h4 id="Dessert-成就感清单"><a href="#Dessert-成就感清单" class="headerlink" title="Dessert 成就感清单"></a>Dessert 成就感清单</h4><p>如果是在觉得厌烦、无聊，提不起精神，不想动脑子，无论是 Action、还是 Focused 里面的事情，都不想干，这就是精神低谷的时候，就可以准备一个“Dessert”清单，里面放一些非常简单，无需动脑、没有时间限制的小事，比如</p><ul><li>整理书桌</li><li>整理电脑文件夹</li><li>下载资源</li></ul><p>这样可以积累成就感，帮助我的精神状态回归。通过在做完 2-3 项 Dessert 之后，状态应该可以回归。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;精神内耗&quot;&gt;&lt;a href=&quot;#精神内耗&quot; class=&quot;headerlink&quot; title=&quot;精神内耗&quot;&gt;&lt;/a&gt;精神内耗&lt;/h2&gt;&lt;p&gt;今天再次阅读&lt;code&gt;精神内耗&lt;/code&gt;这篇知乎文章以及他的姐妹篇&lt;code&gt;高效管理时间的秘诀，在于这三个清单&lt;/c</summary>
      
    
    
    
    
    <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>整理英语学习资源</title>
    <link href="http://yoursite.com/2021/10/23/%E6%95%B4%E7%90%86%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    <id>http://yoursite.com/2021/10/23/%E6%95%B4%E7%90%86%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/</id>
    <published>2021-10-23T04:20:18.000Z</published>
    <updated>2022-09-27T15:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="资源整理"><a href="#资源整理" class="headerlink" title="资源整理"></a>资源整理</h2><p>目前收集了很多的英语学习资源，在国内的时候更多的是单纯的学习，而来到新加坡后有了很多的实战场景，除了日常的积累外，还是需要一些系统性的学些 lah！🤪</p><ul><li>方法论<ul><li><a href="https://github.com/byoungd/English-level-up-tips-for-Chinese">English leval up tips for chinese</a></li></ul></li><li>APP<ul><li><a href="">开言英语</a></li><li><a href="">英语流利说</a></li></ul></li><li>视频<ul><li><a href="https://www.bilibili.com/video/BV1wM4y137kP">五分钟英语基础语法</a></li><li><a href="https://www.bilibili.com/video/BV1aM4y1g7mj">外教 Gill 英语精品课</a></li><li><a href="https://www.bilibili.com/video/BV1cM4y1V7t1">说一口流利标准英语</a></li><li><a href="https://bilibili.com/video/BV1zy4y1b7jZ">English with Lucy</a></li></ul></li><li>B 站 UP 主<ul><li><a href="https://space.bilibili.com/454755309">Youtobe 口语精选</a></li><li><a href="https://space.bilibili.com/483301783">Youtobe 英语精选</a></li><li><a href="https://space.bilibili.com/6926237/">Youtobe 听力精选</a></li><li><a href="https://space.bilibili.com/1589382178">Bigshot 英语</a></li></ul></li><li>Youtobe<ul><li><a href="https://www.youtube.com/c/EnglishwithLucy/featured">English with Lucy</a></li><li><a href="https://www.youtube.com/user/theteachervanessa">Speak English With Vanessa</a></li></ul></li><li>公众号<ul><li><a href="">英语资源学习中心</a></li></ul></li><li>Podcast<ul><li><a href="">潘吉 JENNY 告诉你</a></li><li><a href="">ALL EARS ENGLISH</a></li><li><a href="">英文小酒馆 LHH</a></li><li><a href="">一席英语</a></li><li><a href="">6 Minute English</a></li></ul></li></ul><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>某次偶然的机会听到了<code>潘吉 JENNY 告诉你</code>这款播客，感觉这种中英对话聊天的形式很有意思，每期一个话题，除了学习英语，还可以知道一些有趣的事情。<br>继而开始使用他们公司开发的<code>开言英语</code>App，使用了外交视频课，感觉还不错，根据具体的场景来学习英语。</p><p>其他资源自然是屯起来才有安全感 lah！还都没开始看 🤪。</p><p>播客打算额外选择一个<code>一席英语</code>，再从视频里选择<code>说一口流利标准英语</code>把它办了 💪！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;资源整理&quot;&gt;&lt;a href=&quot;#资源整理&quot; class=&quot;headerlink&quot; title=&quot;资源整理&quot;&gt;&lt;/a&gt;资源整理&lt;/h2&gt;&lt;p&gt;目前收集了很多的英语学习资源，在国内的时候更多的是单纯的学习，而来到新加坡后有了很多的实战场景，除了日常的积累外，还是需要一</summary>
      
    
    
    
    
    <category term="英语学习" scheme="http://yoursite.com/tags/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>算法资源整理</title>
    <link href="http://yoursite.com/2021/10/20/%E6%95%B4%E7%90%86%E7%AE%97%E6%B3%95%E8%B5%84%E6%BA%90/"/>
    <id>http://yoursite.com/2021/10/20/%E6%95%B4%E7%90%86%E7%AE%97%E6%B3%95%E8%B5%84%E6%BA%90/</id>
    <published>2021-10-20T11:18:43.000Z</published>
    <updated>2022-09-27T15:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<p>最近打算再一次系统的学习数据结构与算法，并再次开始有节奏的刷 leetcode。功在平时，有备无患，在还没有熟练掌握之前，学习数据结构与算法和刷题必然是一个长期的过程。</p><h2 id="资源整理"><a href="#资源整理" class="headerlink" title="资源整理"></a>资源整理</h2><p>目前手头上掌握的资源挺多，可真正耐下心看完的没有几个。很多都是看到之后，随手就丢进了收藏夹里吃灰（众所周知，收藏就等于学会了 🤪）。</p><ul><li>在线书籍<ul><li><a href="https://labuladong.github.io/algo">labuladong 算法小抄</a></li><li><a href="https://www.pzijun.cn/algorithms">瓶子君的算法小书</a></li><li><a href="https://github.com/chefyuan/algorithm-base">程序厨的动画算法</a></li><li><a href="https://books.halfrost.com/leetcode">leetcode cookbook</a></li></ul></li><li>极客时间<ul><li><a href="https://time.geekbang.org/course/detail/100019701-67635">算法面试通过 40 讲</a></li><li><a href="https://time.geekbang.org/column/article/76207">数据结构与算法之美</a></li><li><a href="https://time.geekbang.org/opencourse/intro/100057601">常用算法 25 讲</a></li></ul></li><li>视频<ul><li><a href="">百度云-算法训练营</a></li><li><a href="https://space.bilibili.com/525438321/video">代码随想录</a></li><li><a href="https://www.bilibili.com/video/BV1E741157bP">清华大学数据结构精品课-邓俊辉</a></li><li><a href="https://www.bilibili.com/video/BV1m54y1t7F7/">左程云 LeetCode 刷题笔记</a></li></ul></li><li>github<ul><li><a href="https://github.com/yuanguangxin/LeetCode">LeetCode 题目分类与面试问题整理</a></li><li><a href="https://github.com/labuladong/fucking-algorithm">Fucking Algorithm(同 labuladong 算法小抄)</a></li><li><a href="https://github.com/dongxiaohuang/leetcode_solutions">LeetCode Classify</a></li><li><a href="https://github.com/imarvinle/awesome-cs-books">Awesome CS Books</a></li><li><a href="https://github.com/jwasham/coding-interview-university">Coding Interview University</a></li><li><a href="https://github.com/MisterBooo/LeetCodeAnimation">LeetCode Animation</a></li><li><a href="https://github.com/doocs/leetcode">LeetCode 全解</a></li></ul></li><li>书籍<ul><li><a href="">剑指 offer</a></li><li><a href="">编程之美</a></li></ul></li></ul><h2 id="挑选"><a href="#挑选" class="headerlink" title="挑选"></a>挑选</h2><p>资料整理了好多，但是之前没有系统的钻研过。除了面试前看的《算法面试通关 40 讲》和《数据结构与算法之美》,前者属于视频类，后者属于小册类。</p><p>资料太多，不可能一次全部搞完，没有计划，很容易他们就集体吃灰了，还是需要逐个击破。这次决定从众多资料中，挑出两个，一个文字阅读类，一个视频类，互为补充的来学习。</p><ul><li>labuladong 算法小抄</li><li>百度云-算法训练营</li></ul><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>从 labuladong 算法小抄中，从头到尾，按照专题，每两天做一道题目，如果遇到简单的做过的，就顺势做到下一题。遇到复杂的概念和困难的题目，可以结合算法训练营视频来消化。</p><p>2021&#x2F;10&#x2F;20 星期三</p><h2 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h2><p>这里等待反馈，如果 labuladong 算法小抄过了一遍，再来这篇 blog 记录下成功的时间。</p><p>未完待续。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近打算再一次系统的学习数据结构与算法，并再次开始有节奏的刷 leetcode。功在平时，有备无患，在还没有熟练掌握之前，学习数据结构与算法和刷题必然是一个长期的过程。&lt;/p&gt;
&lt;h2 id=&quot;资源整理&quot;&gt;&lt;a href=&quot;#资源整理&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    
    <category term="算法与数据结构" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Mac 安装和启动MySQL数据库</title>
    <link href="http://yoursite.com/2021/10/19/Mac-%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E5%8A%A8MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2021/10/19/Mac-%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E5%8A%A8MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2021-10-19T11:05:29.000Z</published>
    <updated>2022-09-27T15:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习 NestJS 框架，需要使用 MySQL 数据库来配合完成一些功能，以前只使用过 MongoDB，第一次使用 MySQL，在安装和使用时踩了一些坑，记录下来。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>MySQL 分为商业版和社区版，社区版我理解就是开源免费的。但是在官网想要找到下载入口比较费劲，个人感觉不是清晰。下载社区版可以直接使用下面这个链接。<br><a href="https://dev.mysql.com/downloads/mysql/">MySQL Community Download</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载完成后，直接双击 dmg 文件进行安装。安装过程中需要输入输入 root 的密码，这里需要记下来。后面链接数据库的时候需要使用。</p><p><img src="/images/mysql_install.png" alt="mysql_install"></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>为了启动 MySQL 我走了不少弯路，一开始使用命令行来启动，结果很麻烦，也没有成功启动。后来发现其实 MySQL 很人性化，它会在 System Perference 里面生成一个图标，点击图标后就可进行一些基本操作，包括</p><ul><li>start</li><li>stop</li><li>initialize</li></ul><p><img src="/images/mysql_perference_1.png" alt="mysql_perference_1"><br><img src="/images/mysql_perference_2.png" alt="mysql_perference_2"></p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>建议直接使用图形化界面来操作，使用命令行太麻烦了。图形化界面有两个选择一个是收费的<code>Navicat</code>，一个是开源免费的<code>Sequel Pro</code>。<br>笔者一开始试用过<code>Navicat</code>，确实非常好用，鉴于平时需求不是很大，所以暂时没有打算付费使用。于是选择了<code>Sequel Pro</code>。</p><p>在使用<code>Sequel Pro</code>的过程中遇到了一些问题。最开始下载的是<code>v1.1.2</code>正式版，但是使用过程中无法连接数据库，还总是闪退。尝试重装也没有解决。搜索后发现很多人都遇到了这个问题。解决方案是下载<code>test build</code>版本。可以完美解决。</p><p>下载地址: <a href="https://sequelpro.com/test-builds">Sequel Pro test build</a></p><p><img src="/images/sequel_pro_1.png" alt="sequel_pro_1"><br><img src="/images/sequel_pro_2.png" alt="sequel_pro_2"></p><p>如此依赖就可以快乐的使用 MySQL 数据库了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在学习 NestJS 框架，需要使用 MySQL 数据库来配合完成一些功能，以前只使用过 MongoDB，第一次使用 MySQL，在安装和使用时踩了一些坑，记录下来。&lt;/p&gt;
&lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>使用React设计一个Form表单组件</title>
    <link href="http://yoursite.com/2021/07/18/%E4%BD%BF%E7%94%A8React%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AAForm%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2021/07/18/%E4%BD%BF%E7%94%A8React%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AAForm%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/</id>
    <published>2021-07-18T17:18:44.000Z</published>
    <updated>2022-09-27T15:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<p>通过设计一个 Form 组件，学习 React 中，<code>React.Children.forEach</code> 和 <code>React.CloneElement</code> 以及 <code>React.isValidElement</code> 这三个 API 的用法。</p><h1 id="组件-API-设计"><a href="#组件-API-设计" class="headerlink" title="组件 API 设计"></a>组件 API 设计</h1><p>组件用法如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Form</span>, <span class="title class_">FormItem</span>, <span class="title class_">Input</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Form&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> form = <span class="title function_">useRef</span>();</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onSubmit</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    form.<span class="property">current</span>.<span class="title function_">submit</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data&quot;</span>, data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onReset</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    form.<span class="property">current</span>.<span class="title function_">reset</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Form</span> <span class="attr">ref</span>=<span class="string">&#123;form&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Input</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Input</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Input</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onSubmit&#125;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onReset&#125;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="组件实现"><a href="#组件实现" class="headerlink" title="组件实现"></a>组件实现</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Form</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">formData</span>: &#123;&#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  submit = <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">    cb &amp;&amp; <span class="title function_">cb</span>(&#123; ...<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">formData</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  reset = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; formData &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(formData).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      formData[key] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; formData &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  setValue = <span class="function">(<span class="params">name, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; formData &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    formData[name] = value;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; formData &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; children &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; formData &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">const</span> renderChildren = [];</span><br><span class="line"></span><br><span class="line">    <span class="title class_">React</span>.<span class="property">Children</span>.<span class="title function_">forEach</span>(children, <span class="function">(<span class="params">child</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (child.<span class="property">type</span>.<span class="property">displayName</span> === <span class="string">&quot;FormItem&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; name &#125; = child.<span class="property">props</span>;</span><br><span class="line">        renderChildren.<span class="title function_">push</span>(</span><br><span class="line">          <span class="title class_">React</span>.<span class="title function_">cloneElement</span>(</span><br><span class="line">            child,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">key</span>: name,</span><br><span class="line">              <span class="attr">value</span>: formData[name] || <span class="string">&quot;&quot;</span>,</span><br><span class="line">              <span class="attr">handleChange</span>: <span class="variable language_">this</span>.<span class="property">setValue</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            child.<span class="property">props</span>.<span class="property">children</span></span><br><span class="line">          )</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> renderChildren;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">FormItem</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> displayName = <span class="string">&quot;FormItem&quot;</span>;</span><br><span class="line"></span><br><span class="line">  onChange = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, handleChange &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    handleChange &amp;&amp; <span class="title function_">handleChange</span>(name, value);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; label, value, children &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;label&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;React.isValidElement(children) &amp;&amp;</span></span><br><span class="line"><span class="language-xml">        children.type.displayName === &quot;FormItem-Input&quot;</span></span><br><span class="line"><span class="language-xml">          ? React.cloneElement(children, &#123; onChange: this.onChange, value &#125;)</span></span><br><span class="line"><span class="language-xml">          : null&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Input</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> displayName = <span class="string">&quot;FormItem-Input&quot;</span>;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value, onChange &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;value&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          onChange &amp;&amp; onChange(e.target.value);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过设计一个 Form 组件，学习 React 中，&lt;code&gt;React.Children.forEach&lt;/code&gt; 和 &lt;code&gt;React.CloneElement&lt;/code&gt; 以及 &lt;code&gt;React.isValidElement&lt;/code&gt; 这三个 </summary>
      
    
    
    
    
    <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>javascript冷门知识点</title>
    <link href="http://yoursite.com/2021/07/11/javascript%E5%86%B7%E9%97%A8%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2021/07/11/javascript%E5%86%B7%E9%97%A8%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2021-07-11T17:51:26.000Z</published>
    <updated>2022-09-27T15:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么函数是-javascript-中的一等公民"><a href="#为什么函数是-javascript-中的一等公民" class="headerlink" title="为什么函数是 javascript 中的一等公民"></a>为什么函数是 javascript 中的一等公民</h1><p>如果某个编程语言的函数，可以和这个语言的数据类型做一样的事情，我们就把这个语言中的函数称为一等公民。<br>在 javascript 中，函数可以像对象一样拥有自己的属性和方法，也可以作为参数传递给另一个函数，甚至可以作为一个函数的返回值（这个特性要求 js 虚拟机必须实现闭包的特性）。</p><h1 id="javascript-中对象属性的访问顺序"><a href="#javascript-中对象属性的访问顺序" class="headerlink" title="javascript 中对象属性的访问顺序"></a>javascript 中对象属性的访问顺序</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>[<span class="number">100</span>] = <span class="string">&quot;test-100&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>[<span class="number">1</span>] = <span class="string">&quot;test-1&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>[<span class="string">&quot;B&quot;</span>] = <span class="string">&quot;bar-B&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>[<span class="number">50</span>] = <span class="string">&quot;test-50&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>[<span class="number">9</span>] = <span class="string">&quot;test-9&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>[<span class="number">8</span>] = <span class="string">&quot;test-8&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>[<span class="number">3</span>] = <span class="string">&quot;test-3&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>[<span class="number">5</span>] = <span class="string">&quot;test-5&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>[<span class="string">&quot;A&quot;</span>] = <span class="string">&quot;bar-A&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>[<span class="string">&quot;C&quot;</span>] = <span class="string">&quot;bar-C&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> bar) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`index:<span class="subst">$&#123;key&#125;</span>  value:<span class="subst">$&#123;bar[key]&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">index:1  value:test-1</span></span><br><span class="line"><span class="comment">index:3  value:test-3</span></span><br><span class="line"><span class="comment">index:5  value:test-5</span></span><br><span class="line"><span class="comment">index:8  value:test-8</span></span><br><span class="line"><span class="comment">index:9  value:test-9</span></span><br><span class="line"><span class="comment">index:50  value:test-50</span></span><br><span class="line"><span class="comment">index:100  value:test-100</span></span><br><span class="line"><span class="comment">index:B  value:bar-B</span></span><br><span class="line"><span class="comment">index:A  value:bar-A</span></span><br><span class="line"><span class="comment">index:C  value:bar-C</span></span><br><span class="line"><span class="comment"> * /</span></span><br></pre></td></tr></table></figure><p>在 ECMAScript 规范中定义了数字属性应该按照索引值大小升序排列，字符串属性按照创建时的顺序升序排列。<br>数字属性成为排序属性（elements），字符串属性成为常规属性（properties）</p><h1 id="javascript-中的-fast、slow、in-object-属性"><a href="#javascript-中的-fast、slow、in-object-属性" class="headerlink" title="javascript 中的 fast、slow、in-object 属性"></a>javascript 中的 fast、slow、in-object 属性</h1><p>在 js 的对象中，访问速度最快的是 in-object 属性，他们直接存储在对象上面，但是 in-object 属性的数量取决于初始化对象的大小（可以理解为一般为 10 个）。<br>当属性数量超出 in-object 的 size 时，属性会被存储到 properties 中，在数量不大的情况下，properties 中的属性采用线性存储结构，有点是访问速度快，增加和删除的速度慢。在数量增大的情况下，properties 会转化为字典的存储结构，有点是增加和删除的速度快，访问的速度慢。</p><h1 id="函数声明与函数表达式"><a href="#函数声明与函数表达式" class="headerlink" title="函数声明与函数表达式"></a>函数声明与函数表达式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;为什么函数是-javascript-中的一等公民&quot;&gt;&lt;a href=&quot;#为什么函数是-javascript-中的一等公民&quot; class=&quot;headerlink&quot; title=&quot;为什么函数是 javascript 中的一等公民&quot;&gt;&lt;/a&gt;为什么函数是 javascr</summary>
      
    
    
    
    
    <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
</feed>
